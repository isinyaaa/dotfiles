[user]
    name = Isabella Basso
[sendemail]
    confirm = auto
    smtpEncryption = ssl
    smtpServerPort = 465
    chainReplyTo = false
[include]
    path = ~/.gitconfig-common
[includeIf "gitdir:~/repos/redhat/"]
    path = ~/.gitconfig-work
[includeIf "gitdir:~/repos/usp/"]
    path = ~/.gitconfig-usp
[blame]
    ignoreRevsFile = .git-blame-ignore-revs
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    pager = true
    ui = auto
[commit]
    gpgSign = true
[credential]
    helper = !pass-git-helper
[core]
    autocrlf = input
    pager = diff-so-fancy | less -RFX
[diff]
    tool = nvim
    submodule = log
    colorMoved = zebra
[difftool]
    prompt = true
[difftool "code"]
    cmd = code --wait --diff \"$LOCAL\" \"$REMOTE\"
[difftool "nvim"]
    cmd = nvim -d \"$LOCAL\" \"$REMOTE\"
[difftool "vscodium"]
    cmd = vscodium --wait --diff \"$LOCAL\" \"$REMOTE\"
[fetch]
    prune = true
[format]
    signOff = true
[gc]
    writeCommitGraph = true
[init]
    defaultBranch = main
[log]
    date = iso
    decorate = true
[merge]
    # conflictstyle = diff3
    tool = nvim
[mergetool]
    prompt = false
[mergetool "code"]
    cmd = code --wait \"$MERGED\"
[mergetool "nvim"]
    cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"
[mergetool "vscodium"]
    cmd = vscodium --wait \"$MERGED\"
[pull]
    rebase = true
[push]
    gpgSign = if-asked
[alias]
    ## am (a+)
    aa = am --abort

    ## add (a+)
    ap = add -p

    ## branch (bl*)
    bl = branch -vv
    blr = branch -rv

    ## commit (c+)
    cs = commit -s
    # amends
    ca = cs --amend
    can = cs --amend --no-edit
    # no-verifies
    cnv = commit --no-verify
    canv = ca --no-verify
    cannv = can --no-verify

    ## cherry-pick (cp*)
    cp = cherry-pick
    cpa = cherry-pick --abort

    ## fetch (f+)
    fa = fetch --all

    ## log (l+)
    # all
    lnm = log --oneline --graph
    lnnam = log --pretty=oneline --graph
    lostm = log --oneline --stat

    lpm = log -p
    lnns = ln --name-status

    # no-merges
    ln = lnm --no-merges
    lnna = lnnam --no-merges
    lp = lp --no-merges
    lost = lostm --no-merges

    ## push (p+)
    pf = push -f
    pu = push -u

    ## rebase (r+ ~[v])
    ra = rebase --abort
    rc = rebase --continue
    ret = rebase --edit-todo
    rh = reset --hard
    ri = rebase -i --autosquash

    ## remote (r+)
    rv = remote -v

    ## stash (s+ ~[t])
    ski = stash push --keep-index
    sst = git stash -S
    ssp = stash show -p
    sd = stash drop
    sp = stash pop

    ## status (st*)
    st = status -sb

    ## misc

    # get a commit hash
    get-hash = log --format="%H" -n1

    # show staged content
    staged = diff --staged

    # get the root of the repo
    top = rev-parse --show-toplevel

    ### functions

    # commit and push force
    cpf = "!git can && git pf"

    ## temporary commits
    tempsave = "!f(){\
            NUM=${1:-0};\
            git commit --no-gpg-sign --no-verify -m \"temp $NUM\";\
        };f"
    save = "!f(){\
            NUM=${1:-0};\
            git cs -m \"save $NUM\";\
        };f"

    # get default branch
    get-default-branch = "!f(){\
            git symbolic-ref refs/remotes/${1:-origin}/HEAD | cut -d'/' -f4;\
        };f"

    ## reverse the log output
    lrf = "!f(){\
            git log --reverse ${1:-$(git get-default-branch)}..${2:-HEAD};\
        };f"

    # reverse log line output
    lnf = "!f(){\
            git ln ${1:-$(git get-default-branch)}..${2:-HEAD};\
        };f"

    # get patch-set log
    lpf = "!f(){\
            git lp ${1:-$(git get-default-branch)}..${2:-HEAD};\
        };f"

    ## reverse patch-set log
    lprf = "!f(){\
            git lp --reverse ${1:-$(git get-default-branch)}..${2:-HEAD};\
        };f"

    ## rebase onto a branch
    # first we test arguments, if there are two, we assume the first is the
    # tracking
    # then rebase the current branch onto the specified
    ro = "!f(){\
            case $# in \
                0) \
                    BRANCH=$(git get-default-branch); \
                    TRACKING=origin;; \
                1) \
                    BRANCH=$1; \
                    TRACKING=origin;; \
                2) \
                    BRANCH=$2; \
                    TRACKING=$1;; \
            esac; \
            git rebase $(git branch --show-current)~ --onto $(git get-hash $TRACKING/$BRANCH);\
        };f"

    ## update working branch
    # it can either be to work again on top of another branch (usually main) or
    # to update the current branch
    #
    # first we test arguments, if there are two, we assume the first is the
    # tracking branch and the second is the branch itself
    # then, if we're updating the current branch, we simply stash, pull and pop
    # if we're updating another branch, we stash, checkout the branch, pull,
    # checkout back, rebase and then pop
    update = "!f(){\
            TRACKING=origin; \
            case $# in \
                0) \
                    BRANCH=$(git get-default-branch);; \
                1) \
                    BRANCH=$1;; \
                2) \
                    BRANCH=$2; \
                    TRACKING=$1;; \
            esac; \
            git stash -S; \
            BEFORE=$(git stash list | wc -l); \
            git stash; \
            AFTER=$(git stash list | wc -l); \
            git fetch $TRACKING; \
            UPDATE=0; \
            test $(git branch --show-current) = $BRANCH || UPDATE=1; \
            test $UPDATE = 1 && git checkout $BRANCH; \
            UNPOP=0; \
            git pull $TRACKING $BRANCH && UNPOP=1; \
            test $UPDATE = 1 && { \
                git checkout -; \
                git ro $TRACKING $BRANCH && UNPOP=1; \
            }; \
            test $UNPOP = 1 && { \
                test $BEFORE = $AFTER || git stash pop; \
                echo \"updated\"; \
            }; \
        };f"
